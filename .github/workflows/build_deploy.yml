name: build docker image

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

#환경설정
env:
  DOCKER_APP_IMAGE: ghcr.io/capstone2024-student-counselling-ai-web/capstone_design-streamlit
  DOCKER_NGINX_IMAGE: ghcr.io/capstone2024-student-counselling-ai-web/capstone_design-nginx
  WORKING_DIR: /home/iscmyoo
  SCP_AUTH_OPTION: ${{ secrets.SERVER_PASSWORD }}
  VERSION: ${{ github.sha }}
  NAME: capstone_streamlit_develop
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10.10"]
    outputs:
      label: ${{ steps.set-label.outputs.label }}
    steps:
      # github repository에서 checkout
      - name: checkout
        uses: actions/checkout@v4
      - name: Set Environment
        run: |
          if [ "${{ github.base_ref }}" == "develop" ]; then
            echo "DOCKER_APP_IMAGE=${{ env.DOCKER_APP_IMAGE }}_develop" >> $GITHUB_ENV
            echo "DOCKER_NGINX_IMAGE=${{ env.DOCKER_NGINX_IMAGE }}_develop" >> $GITHUB_ENV
            echo "DEPLOY_LABEL_TAG=label-test" >> $GITHUB_ENV
            echo "WORKING_DIR=/home/ubuntu" >> $GITHUB_ENV
            echo "SCP_AUTH_OPTION=${{ secrets.KEY }}" >> $GITHUB_ENV
          fi
      # docker를 사용하기 위한 기본 세팅
      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GIT_CI_CD_TOKEN }}
      # push and docker layer cache 저장하기

      # Streamlit app image build and push
      - name: Build app image and push
        id: docker_build_app
        uses: docker/build-push-action@v5
        with:
          file: ./capstone_design/app/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_APP_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build nginx image and push
        id: docker_build_nginx
        uses: docker/build-push-action@v5
        with:
          file: ./capstone_design/nginx/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_NGINX_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - id: set-label
        run: |
          if [ "${{ github.base_ref }}" == "main" ]; then
            echo "label=self-hosted, label-go" >> $GITHUB_OUTPUT
            echo "label=self-hosted, label-go"
          elif [ "${{ github.base_ref }}" == "develop" ]; then
            echo "label=self-hosted, label-test" >> $GITHUB_OUTPUT
            echo "label=self-hosted, label-test"
          fi
        shell: bash

  deploy:
    needs: build
    name: Deploy docker image
    runs-on: ${{ needs.build.outputs.label }}
    steps:
      # github repository에서 checkout
      - name: checkout
        uses: actions/checkout@v4
      # docker-compose.yml 파일 전송
      - name: Deploy docker_compose file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEVELOP_HOST }}
          username: ${{ secrets.DEVELOP_USER }}
          key: ${{ env.SCP_AUTH_OPTION }}
          port: ${{ secrets.PORT }}
          source: './docker-compose.yml'
          target: ${{ env.WORKING_DIR }}
      # ghcr 로그인
      - name: Login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GIT_CI_CD_TOKEN }}
      # docker run
      - name: Docker run
        run: |
          docker stop streamlit_app && docker stop proxy_nginx \
          docker rmi -f ${{ env.DOCKER_APP_IMAGE }}:latest && docker rmi -f ${{ env.DOCKER_NGINX_IMAGE }}
          docker pull ${{ env.DOCKER_APP_IMAGE }}:latest && docker pull ${{ env.DOCKER_NGINX_IMAGE }}:latest
          cd ${{ env.WORKING_DIR }}
          docker-compose up --build -d
